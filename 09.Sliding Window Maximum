Method 01: Sliding Window Maximum (Using Array)


class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        
         int n = nums.length;
  if (n == 0 || k == 0) {
    return new int[0];
  }
  
  int numOfWindow = n - k + 1;
  int[] result = new int[numOfWindow]; 
  
  for (int start = 0; start < numOfWindow; ++start) {
    int end = start + k - 1;
    int maxVal = nums[start];
    for (int i = start + 1; i <= end; ++i) {
      if (nums[i] > maxVal) { 
        maxVal = nums[i];
      }
    }
    result[start] = maxVal;
  }
  
  return result;
    }
}


**************************************************************************************************************************************************************************************

Method 02: Sliding Window Maximum (Using Stack)


class Solution {
    public int[] maxSlidingWindow(int[] arr, int k) {
        int n=arr.length;
     ArrayList<Integer> al=new ArrayList<>();
        Deque<Integer> d=new ArrayDeque<>();
          int[] result = new int[n - k + 1];
        for(int i=0;i<n;i++){
            
            if(!d.isEmpty()&&d.peek()==i-k){
                d.pop();
            }
            
            while(!d.isEmpty()&&arr[d.peekLast()]<=arr[i]){
                d.pollLast();
            }
            
            d.offer(i);
        
    if (i >= k - 1) {
      result[i - k + 1] = arr[d.peekFirst()];
    }
  }
  return result;
    }
}
