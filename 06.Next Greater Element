Method 01: Nearest Smaller Element on left


public class Solution {
    public int[] prevSmaller(int[] A) {
        int n=A.length;
        Stack<Integer> st=new Stack<>();
        int ans[]=new int[n];
        for(int i=0;i<n;i++){
            while(st.size()>0&&st.peek()>=A[i]){
                st.pop();
            }
            
            if(!st.isEmpty()){
                ans[i]=st.peek();
            }
            else{
                ans[i]=-1;
            }
            st.push(A[i]);
        }
        return ans;
    }
}

**********************************************************************************************************************************************************************************

Method 02: Nearest Greater Element on left


public class Solution {
    public int[] prevSmaller(int[] A) {
        int n=A.length;
        Stack<Integer> st=new Stack<>();
        int ans[]=new int[n];
        for(int i=0;i<n;i++){
            while(st.size()>0&&st.peek()<=A[i]){
                st.pop();
            }
            
            if(!st.isEmpty()){
                ans[i]=st.peek();
            }
            else{
                ans[i]=-1;
            }
            st.push(A[i]);
        }
        return ans;
    }
}

***************************************************************************************************************************************************************************************

Method 03: Next Smallest Element on right


public class Solution {
    public int[] prevSmaller(int[] A) {
        int n=A.length;
        Stack<Integer> st=new Stack<>();
        int ans[]=new int[n];
        for(int i=n-1;i>=0;i--){
            while(st.size()>0&&st.peek()>=A[i]){
                st.pop();
            }
            
            if(!st.isEmpty()){
                ans[i]=st.peek();
            }
            else{
                ans[i]=-1;
            }
            st.push(A[i]);
        }
        return ans;
    }
}


*******************************************************************************************************************************************************************************************

Method 04: Next Greater Element on right


class Solution{
    public static long[] nextLargerElement(long[] arr, int n) { 
        // Your code here
        long ans[]=new long[n];
        Stack<Long> stack=new Stack<Long>();
        for(int i=n-1;i>=0;i--){
            while(stack.size()>0&&stack.peek()<=arr[i]){
                stack.pop();
            }
            if(!stack.isEmpty()){
                ans[i]=stack.peek();
            }
            else{
                ans[i]=-1;
            }
            stack.push(arr[i]);
        }
        return ans;
    } 
}


